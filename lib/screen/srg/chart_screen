import 'dart:async';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
// import 'package:syncfusion_flutter_charts/charts.dart';
import 'package:koperasimobile/controller/chart_controller.dart';
import 'package:koperasimobile/constant/dialog_constant.dart';

class ColumnChartSF extends StatefulWidget {
  const ColumnChartSF({Key? key}) : super(key: key);

  @override
  State<StatefulWidget> createState() => ColumnChartSFState();
}

class ColumnChartSFState extends State<ColumnChartSF> {
  ChartController chartcontroller = Get.put(ChartController());

  @override
  void initState() {
    chartcontroller.getChart(
      context: context,
      callback: (result, error){
        if(result != null && result['error'] != true){
          displayChart();
        }else{
          DialogConstant.alertError('Data tidak ada');
        }
      }
    );
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: EdgeInsets.all(2.0),
      child: AspectRatio(
        aspectRatio: 1.64,
        child: Card(
          elevation: 4,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
          color: Colors.white,
          child: Padding(
            padding: const EdgeInsets.only(top: 24, bottom: 24),
            child: Container(
              child: chartKosong,
            ),
          ),
        ),
      ),
    );
  }

  Widget chartKosong = CircularProgressIndicator();
  displayChart() {
    setState(() {
      chartKosong =
        SfCartesianChart(
          title: ChartTitle(
            text: 'Total Sales Order',
            // backgroundColor: Colors.lightGreen,
            // borderColor: Colors.blue,
            borderWidth: 2,
            // Aligns the chart title to left
            alignment: ChartAlignment.center,
            textStyle: TextStyle(
              color: Color.fromRGBO(8, 142, 255, 1),
              fontFamily: 'Roboto',
              fontStyle: FontStyle.italic,
              fontSize: 14,
              fontWeight: FontWeight.w500,
            ),
          ),
          primaryXAxis: CategoryAxis(
            title: AxisTitle(
              text: 'Hari',
              textStyle: TextStyle(
                  color: Colors.deepOrange,
                  fontFamily: 'Roboto',
                  fontSize: 16,
                  fontStyle: FontStyle.italic,
                  fontWeight: FontWeight.w500),
            ),
          ),
          primaryYAxis: NumericAxis(
            // minimum: 0, maximum: 20000000, interval: 1000000,
            title: AxisTitle(
              text: 'KG (juta)',
              textStyle: TextStyle(
                  color: Colors.deepOrange,
                  fontFamily: 'Roboto',
                  fontSize: 16,
                  fontStyle: FontStyle.italic,
                  fontWeight: FontWeight.w500),
            ),
          ),
          tooltipBehavior: TooltipBehavior(enable: true),
          series: <ChartSeries<ChartData, String>>[
            ColumnSeries<ChartData, String>(
              name: 'Kg',
              dataSource: chartcontroller.chartArray,
              xValueMapper: (ChartData data, _) => data.bulan,
              yValueMapper: (ChartData data, _) => data.total / 1000000,
              pointColorMapper: (ChartData data, _) => data.color,
              color: const Color.fromRGBO(8, 142, 255, 1),
            )
          ],
        );
    });
  }
}